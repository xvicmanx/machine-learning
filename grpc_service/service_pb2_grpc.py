# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class MachineLearningStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PredictSalary = channel.unary_unary(
                '/machine_learning.MachineLearning/PredictSalary',
                request_serializer=service__pb2.PredictSalaryRequest.SerializeToString,
                response_deserializer=service__pb2.PredictSalaryResponse.FromString,
                )
        self.PredictPurchase = channel.unary_unary(
                '/machine_learning.MachineLearning/PredictPurchase',
                request_serializer=service__pb2.PredictPurchaseRequest.SerializeToString,
                response_deserializer=service__pb2.PredictPurchaseResponse.FromString,
                )
        self.PredictSegment = channel.unary_unary(
                '/machine_learning.MachineLearning/PredictSegment',
                request_serializer=service__pb2.PredictSegmentRequest.SerializeToString,
                response_deserializer=service__pb2.PredictSegmentResponse.FromString,
                )
        self.GetOptimalCampaignAdOption = channel.unary_unary(
                '/machine_learning.MachineLearning/GetOptimalCampaignAdOption',
                request_serializer=service__pb2.GetOptimalCampaignAdOptionRequest.SerializeToString,
                response_deserializer=service__pb2.GetOptimalCampaignAdOptionResponse.FromString,
                )


class MachineLearningServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PredictSalary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictPurchase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictSegment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptimalCampaignAdOption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MachineLearningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PredictSalary': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictSalary,
                    request_deserializer=service__pb2.PredictSalaryRequest.FromString,
                    response_serializer=service__pb2.PredictSalaryResponse.SerializeToString,
            ),
            'PredictPurchase': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictPurchase,
                    request_deserializer=service__pb2.PredictPurchaseRequest.FromString,
                    response_serializer=service__pb2.PredictPurchaseResponse.SerializeToString,
            ),
            'PredictSegment': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictSegment,
                    request_deserializer=service__pb2.PredictSegmentRequest.FromString,
                    response_serializer=service__pb2.PredictSegmentResponse.SerializeToString,
            ),
            'GetOptimalCampaignAdOption': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptimalCampaignAdOption,
                    request_deserializer=service__pb2.GetOptimalCampaignAdOptionRequest.FromString,
                    response_serializer=service__pb2.GetOptimalCampaignAdOptionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'machine_learning.MachineLearning', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MachineLearning(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PredictSalary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/machine_learning.MachineLearning/PredictSalary',
            service__pb2.PredictSalaryRequest.SerializeToString,
            service__pb2.PredictSalaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PredictPurchase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/machine_learning.MachineLearning/PredictPurchase',
            service__pb2.PredictPurchaseRequest.SerializeToString,
            service__pb2.PredictPurchaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PredictSegment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/machine_learning.MachineLearning/PredictSegment',
            service__pb2.PredictSegmentRequest.SerializeToString,
            service__pb2.PredictSegmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOptimalCampaignAdOption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/machine_learning.MachineLearning/GetOptimalCampaignAdOption',
            service__pb2.GetOptimalCampaignAdOptionRequest.SerializeToString,
            service__pb2.GetOptimalCampaignAdOptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
